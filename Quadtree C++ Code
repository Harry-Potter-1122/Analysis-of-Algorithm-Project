// Code Generated by ChatGPT
#include <iostream>
#include <vector>

struct Point {
    int x, y;
    Point(int x_, int y_) : x(x_), y(y_) {}
};

struct Boundary {
    int x, y; // center
    int w, h; // half width and half height

    bool contains(Point p) {
        return (p.x >= x - w && p.x <= x + w &&
                p.y >= y - h && p.y <= y + h);
    }
};

class Quadtree {
    static const int CAPACITY = 4;
    Boundary boundary;
    std::vector<Point> points;
    bool divided = false;

    Quadtree *northwest = nullptr;
    Quadtree *northeast = nullptr;
    Quadtree *southwest = nullptr;
    Quadtree *southeast = nullptr;

public:
    Quadtree(Boundary boundary_) : boundary(boundary_) {}

    bool insert(Point p) {
        if (!boundary.contains(p))
            return false;

        if (points.size() < CAPACITY) {
            points.push_back(p);
            return true;
        }

        if (!divided)
            subdivide();

        return (northwest->insert(p) || northeast->insert(p) ||
                southwest->insert(p) || southeast->insert(p));
    }

    void subdivide() {
        int x = boundary.x;
        int y = boundary.y;
        int w = boundary.w / 2;
        int h = boundary.h / 2;

        northwest = new Quadtree({x - w, y - h, w, h});
        northeast = new Quadtree({x + w, y - h, w, h});
        southwest = new Quadtree({x - w, y + h, w, h});
        southeast = new Quadtree({x + w, y + h, w, h});

        divided = true;
    }

    void print() {
        for (const Point &p : points) {
            std::cout << "(" << p.x << "," << p.y << ") ";
        }
        if (divided) {
            northwest->print();
            northeast->print();
            southwest->print();
            southeast->print();
        }
    }
};

int main() {
    Boundary b = {50, 50, 50, 50};
    Quadtree qt(b);

    qt.insert({30, 40});
    qt.insert({70, 20});
    qt.insert({45, 60});
    qt.insert({80, 80});
    qt.insert({25, 30});

    std::cout << "Points in Quadtree:\n";
    qt.print();

    return 0;
}
